type Contract @entity {
  id: ID! #SmartContractAddress
  totalReward: String!
  # totalReward: Float!
  totalStaked: String!
  # totalStaked: Float!
  rewards: [DappStakingReward] @derivedFrom(field: "contract")
  stakes: [BondAndStake] @derivedFrom(field: "contract")
  unstakes: [UnbondAndUnstake] @derivedFrom(field: "contract")
  # stakers: [Account] @derivedFrom(field: "contract")
}

type DappStakingReward @entity {
  id: ID! #blockHeight-eventIdx
  account: Account!
  contract: Contract!
  contractType: ContractType!
  amount: String!
  eraIndex: Int!
  timestamp: Date!
}

enum ContractType {
  EVM
  WASM
}

type Account @entity {
  id: ID! #address
  totalRewarded: String!
  totalStaking: String!
  rewards: [DappStakingReward] @derivedFrom(field: "account")
  stakes: [BondAndStake] @derivedFrom(field: "account")
  unstakes: [UnbondAndUnstake] @derivedFrom(field: "account")
  # contracts: [Contract] @derivedFrom(field: "")
}

# type AllClaimedReward @entity {
#   id: ID!
#   amount: String!
#   count: BigInt!
# }

type BondAndStake @entity {
  id: ID! #blockHeight-eventIdx
  account: Account!
  contract: Contract!
  contractType: ContractType!
  amount: String!
  timestamp: Date!
}

type UnbondAndUnstake @entity {
  id: ID! #blockHeight-eventIdx
  account: Account!
  contract: Contract!
  contractType: ContractType!
  amount: String!
  timestamp: Date!
}
